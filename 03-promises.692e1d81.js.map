{"mappings":"qhBASA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCT,EAAQgB,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,OAC1BE,EAASH,SAASD,EAAYE,OAE/BG,MAAMpB,IAAWoB,MAAMF,IAAUE,MAAMD,IAK9C,SAAwBE,EAAYH,EAAMC,GACxC,IAAIG,EAAeD,EAEnB,IAAK,IAAIE,EAAI,EAAGA,GAAKJ,EAAQI,IAC3BzB,EAAcyB,EAAGD,GACdE,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqB5B,QAAiBC,MAAU,IAGnD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClByB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoB9B,QAAeC,MAAU,IAInDsB,GAAgBJ,C,CApBhBY,CAAe9B,EAAOkB,EAAMC,E","sources":["src/js/03-promises.js"],"sourcesContent":["// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  if (!isNaN(delay) && !isNaN(step) && !isNaN(amount)) {\n    createPromises(delay, step, amount);\n  }\n}\n\nfunction createPromises(firstDelay, step, amount) {\n  let currentDelay = firstDelay;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.Success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.Failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    currentDelay += step;\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","isNaN","firstDelay","currentDelay","i","then","$parcel$interopDefault","Notify","Success","catch","Failure","$47d4ff9957288465$var$createPromises"],"version":3,"file":"03-promises.692e1d81.js.map"}